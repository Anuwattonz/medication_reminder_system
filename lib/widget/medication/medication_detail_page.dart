import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:medication_reminder_system/api/medication_detail_api.dart';
import 'package:medication_reminder_system/widget/medication/edit_medication_timings_dialog.dart';
import 'package:medication_reminder_system/widget/medication/edit_medication.dart';
import 'package:medication_reminder_system/widget/medication/detail/detail_widget.dart';
import 'package:medication_reminder_system/jwt/auth.dart';

class MedicationDetailPage extends StatefulWidget {
  final String medicationId;
  final VoidCallback? onDataChanged;

  const MedicationDetailPage({
    super.key,
    required this.medicationId,
    this.onDataChanged,
  });

  @override
  State<MedicationDetailPage> createState() => _MedicationDetailPageState();
}

class _MedicationDetailPageState extends State<MedicationDetailPage> {
  Map<String, dynamic>? medicationDetail;
  bool _isLoading = false;
  bool _hasDataChanged = false;
  String? _currentImageUrl;

  // ‡πÄ‡∏Å‡πá‡∏ö hash ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  String? _dataHash;

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _clearUnusedImageCache();
    });

    _loadMedicationDetail();
  }

  @override
  void dispose() {
    if (_currentImageUrl != null) {
      _clearImageCache(_currentImageUrl!);
    }

    if (_hasDataChanged && widget.onDataChanged != null) {
      widget.onDataChanged!();
    }
    super.dispose();
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  String _generateDataHash(Map<String, dynamic> data) {
    final medication = data['medication'];
    final timings = data['medication_timings'] ?? [];

    final hashData = {
      'name': medication['medication_name'],
      'nickname': medication['medication_nickname'],
      'description': medication['description'],
      'dosage_form': medication['dosage_form'],
      'unit_type': medication['unit_type'],
      'picture_url': medication['picture_url'],
      'timings_count': timings.length,
      'timings_data': timings.map((t) => '${t['time']}_${t['dosage']}_${t['status']}').join('|'),
    };

    return hashData.toString();
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ image cache ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
  Future<void> _loadMedicationDetail() async {
    setState(() => _isLoading = true);

    try {
      final result = await MedicationDetailApi.getMedicationDetail(widget.medicationId);

      if (result['success'] == true) {
        final newData = result['data'];
        final newImageUrl = newData['medication']['picture_url'];
        final newDataHash = _generateDataHash(newData);

        bool dataReallyChanged = _dataHash != null && _dataHash != newDataHash;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        bool imageActuallyChanged = _hasImageActuallyChanged(_currentImageUrl, newImageUrl);

        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ clear cache
        if (imageActuallyChanged) {
          debugPrint('üñºÔ∏è Image actually changed, clearing cache');
          if (_currentImageUrl != null) {
            await _clearImageCache(_currentImageUrl!);
          }
          if (newImageUrl != null) {
            await _clearImageCache(newImageUrl);
          }
        } else {
          debugPrint('üñºÔ∏è Image not changed, keeping cache');
        }

        setState(() {
          medicationDetail = newData;
          _currentImageUrl = newImageUrl;
          _dataHash = newDataHash;
          if (dataReallyChanged) {
            _hasDataChanged = true;
          }
        });

        // Force rebuild ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á
        if (mounted && imageActuallyChanged) {
          setState(() {});
        }
      } else {
        _handleApiError(result);
      }
    } catch (e) {
      _handleException(e);
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _hasImageActuallyChanged(String? oldUrl, String? newUrl) {
    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô null = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (oldUrl == null && newUrl == null) return false;
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡πÉ‡∏î‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô null = ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (oldUrl == null || newUrl == null) return true;
    
    // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ base URL (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° timestamp)
    final oldBaseUrl = oldUrl.split('?')[0];
    final newBaseUrl = newUrl.split('?')[0];
    
    // ‡∏ñ‡πâ‡∏≤ base URL ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô = ‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á
    final actuallyChanged = oldBaseUrl != newBaseUrl;
    
    debugPrint('üîç Image change check:');
    debugPrint('  Old: $oldBaseUrl');
    debugPrint('  New: $newBaseUrl');
    debugPrint('  Changed: $actuallyChanged');
    
    return actuallyChanged;
  }

  void _editMedicationInfo() {
    if (medicationDetail?['medication'] == null) return;

    final medication = medicationDetail!['medication'];

    showDialog(
      context: context,
      builder: (context) {
        return EditMedicationInfoDialog(
          medicationId: widget.medicationId,
          currentData: {
            'medication_name': medication['medication_name'] ?? '',
            'medication_nickname': medication['medication_nickname'] ?? '',
            'description': medication['description'] ?? '',
            'picture_url': medication['picture_url'],
            'dosage_form': medication['dosage_form'] ?? '',
            'unit_type': medication['unit_type'] ?? '',
            'dosage_form_id': medication['dosage_form_id'],
            'unit_type_id': medication['unit_type_id'],
          },
          onSave: _handleMedicationInfoUpdate,
        );
      },
    );
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≤‡∏Å dialog - ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onDataChanged
  Future<void> _handleMedicationInfoUpdate(Map<String, dynamic> updatedData, bool dataChanged, {bool imageChanged = false}) async {
    if (!dataChanged) return;

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    if (!imageChanged) {
      debugPrint('üìù Data changed but image not changed, updating locally');
      
      setState(() {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API
        medicationDetail!['medication'] = {
          ...medicationDetail!['medication'],
          ...updatedData,
        };
        _hasDataChanged = true;
        _dataHash = _generateDataHash(medicationDetail!);
      });
      
      _showSnackBar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      debugPrint('üñºÔ∏è Image changed, reloading from API');
      // ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API
      await _loadMedicationDetail();
      _showSnackBar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    
    // ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å widget.onDataChanged?.call(); ‡∏≠‡∏≠‡∏Å
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ reminder
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç timing ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onDataChanged ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô  
  void _editMedicationTimings() {
    if (medicationDetail == null) return;
    
    showDialog(
      context: context,
      builder: (context) => EditMedicationTimingsDialog(
        medicationId: widget.medicationId,
        currentTimings: List<Map<String, dynamic>>.from(
          (medicationDetail!['medication_timings'] ?? [])
              .map((e) => Map<String, dynamic>.from(e)),
        ),
        timingUsage: medicationDetail!['timing_usage'], // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        onSave: (updatedTimings) async {
          final oldHash = _dataHash;

          setState(() {
            medicationDetail!['medication_timings'] = updatedTimings;
            _dataHash = _generateDataHash(medicationDetail!);
          });

          if (oldHash != _dataHash) {
            setState(() => _hasDataChanged = true);
          }

          _showSnackBar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

          // ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å widget.onDataChanged?.call(); ‡∏≠‡∏≠‡∏Å
          // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç timing ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ reminder
        },
      ),
    );
  }

  void _handleApiError(Map<String, dynamic> result) {
    final message = result['message'] ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
    _showSnackBar(message, isError: true);

    if (result['error'] == 'auth_required' || result['error'] == 'auth_expired') {
      _handleAuthError();
    }
  }

  void _handleException(dynamic e) {
    String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
    final errorString = e.toString().toLowerCase();

    if (errorString.contains('timeout') || errorString.contains('‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')) {
      errorMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
    } else if (errorString.contains('network') || errorString.contains('connection')) {
      errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ';
    }

    _showSnackBar(errorMessage, isError: true);
  }

  Future<void> _handleAuthError() async {
    if (mounted) {
      await Auth.logout(context);
    }
  }

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á _clearImageCache method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error 404
  Future<void> _clearImageCache(String imageUrl) async {
    try {
      // Clear cached network image
      await CachedNetworkImage.evictFromCache(imageUrl);
      
      // Clear image ‡∏ó‡∏µ‡πà‡∏°‡∏µ timestamp ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      final baseUrl = imageUrl.split('?')[0];
      await CachedNetworkImage.evictFromCache(baseUrl);
      
      debugPrint('üóëÔ∏è Cleared image cache for: $imageUrl');
    } catch (e) {
      // ‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 404 error ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      if (!e.toString().contains('404') && !e.toString().contains('Invalid statusCode: 404')) {
        debugPrint('‚ùå Error clearing image cache: $e');
      } else {
        debugPrint('‚ÑπÔ∏è Old image file already removed (expected): $imageUrl');
      }
    }
  }

  void _clearUnusedImageCache() {
    try {
      PaintingBinding.instance.imageCache.clear();
    } catch (_) {}
  }

  // ==================== SnackBar ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô medication_page ====================

  void _showSnackBar(String message, {bool isError = false}) {
    if (!mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                isError ? Icons.error_outline : Icons.check_circle_outline,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                message,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                  color: Colors.white,
                ),
              ),
            ),
          ],
        ),
        backgroundColor: isError ? Colors.red[600] : Colors.green[600],
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        duration: Duration(seconds: isError ? 4 : 2),
        margin: const EdgeInsets.all(16),
        elevation: 8,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤'),
          backgroundColor: Colors.teal,
          foregroundColor: Colors.white,
        ),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    if (medicationDetail == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤'),
          backgroundColor: Colors.teal,
          foregroundColor: Colors.white,
        ),
        body: const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤')),
      );
    }

    final medication = Map<String, dynamic>.from(medicationDetail!['medication']);
    final timingsDynamic = medicationDetail!['medication_timings'] ?? [];
    final List<Map<String, dynamic>> timings = timingsDynamic
        .map<Map<String, dynamic>>((item) => Map<String, dynamic>.from(item))
        .toList();

    return Scaffold(
      appBar: AppBar(
        title: Text(medication['medication_name'] ?? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤'),
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: MedicationDetailWidget.buildGradientBackground(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
              MedicationDetailWidget.buildMedicationInfoCard(
                medication: medication,
                medicationId: widget.medicationId,
                onEditPressed: _editMedicationInfo,
              ),
              const SizedBox(height: 24),
              
              // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤
              MedicationDetailWidget.buildMedicationTimingsCard(
                timings: timings,
                onEditPressed: _editMedicationTimings,
              ),
            ],
          ),
        ),
      ),
    );
  }
}