// ‡πÑ‡∏ü‡∏•‡πå: lib/jwt/auth_checker.dart
// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ network error

import 'package:flutter/material.dart';
import 'package:medication_reminder_system/page/tabbar_page.dart';
import 'package:medication_reminder_system/page/settings_page.dart';
import 'package:medication_reminder_system/page/login_page.dart';
import 'package:medication_reminder_system/jwt/auth.dart';
import 'package:medication_reminder_system/api/api_helper.dart';
import 'package:medication_reminder_system/config/api_config.dart';
import 'package:medication_reminder_system/jwt/network_checker.dart'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ô‡∏µ‡πâ

/// ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
class AuthChecker extends StatefulWidget {
  const AuthChecker({super.key});

  @override
  State<AuthChecker> createState() => _AuthCheckerState();
}

class _AuthCheckerState extends State<AuthChecker> {
  String _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...';

  @override
  void initState() {
    super.initState();
    debugPrint('üîÑ AuthChecker initState called');
    _checkAuthenticationStatus();
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Authentication ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Å‡πà‡∏≠‡∏ô
  Future<void> _checkAuthenticationStatus() async {
    try {
      await Future.delayed(const Duration(seconds: 1));
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
      final hasInternet = await NetworkChecker.hasInternet();
      if (!hasInternet) {
        debugPrint('‚ùå No internet connection detected');
        
        if (mounted) {
          await NetworkChecker.showNoInternetAndExit(context);
        }
        return; // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÑ‡∏°‡πà logout
      }

      debugPrint('‚úÖ Internet connection confirmed');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logout flag ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
      if (await _isUserLoggedOut()) {
        debugPrint('üö™ User was logged out, going to login');
        _goToLogin();
        return;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ token ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final token = await JWTManager.getToken();
      if (token == null) {
        debugPrint('‚ùå No token found locally');
        await _clearDataAndGoToLogin();
        return;
      }

      // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏±‡∏ö server (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ô‡πá‡∏ï)
      final serverTokenValid = await _validateTokenWithServer();
      
      if (!serverTokenValid) {
        debugPrint('‚ùå Server token validation failed');
        await _clearDataAndGoToLogin();
        return;
      }

      debugPrint('‚úÖ Server token validation successful');
      
      // ‡πÉ‡∏ä‡πâ Auth.isAuthenticated() ‡πÅ‡∏ó‡∏ô JWTManager ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      final isAuthenticated = await Auth.isAuthenticated();
      
      if (!isAuthenticated) {
        debugPrint('‚ùå Local authentication failed, going to login');
        await _clearDataAndGoToLogin();
        return;
      }

      debugPrint('‚úÖ Authentication successful');
      
      // ‡πÉ‡∏ä‡πâ Auth.getCurrentSession() ‡πÅ‡∏ó‡∏ô
      final session = await Auth.getCurrentSession();
      
      if (session?.userId == null) {
        debugPrint('‚ùå No user data in session');
        await _clearDataAndGoToLogin();
        return;
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      debugPrint('üë§ User: ${session!.username} (ID: ${session.userId})');
      debugPrint('üîó Has connection: ${session.hasConnection}');
      debugPrint('üîå Connection ID: ${session.connectionId}');

      await _updateStatus('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      await Future.delayed(const Duration(seconds: 1));

      // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å JWT session ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (session.hasConnection && session.connectionId != null) {
        debugPrint('‚úÖ Has device connection, going to TabBar');
        _goToTabBar(session);
      } else {
        debugPrint('‚öôÔ∏è No device connection, going to Settings');
        _goToSettings(session);
      }

    } catch (e) {
      debugPrint('‚ùå Error during authentication check: $e');
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network error ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
      if (_isNetworkError(e)) {
        if (mounted) {
          await NetworkChecker.showNoInternetAndExit(context);
        }
        return; // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÑ‡∏°‡πà logout
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà network error ‡πÉ‡∏´‡πâ‡πÑ‡∏õ login ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      await _updateStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      await Future.delayed(const Duration(seconds: 2));
      await _clearDataAndGoToLogin();
    }
  }

  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô network error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isNetworkError(dynamic error) {
    if (error == null) return false;
    final errorString = error.toString().toLowerCase();
    return errorString.contains('network') ||
           errorString.contains('connection') ||
           errorString.contains('timeout') ||
           errorString.contains('socket') ||
           errorString.contains('failed to connect') ||
           errorString.contains('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠') ||
           errorString.contains('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤') ||
           errorString.contains('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢');
  }

  /// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡∏±‡∏ö server ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà auto-logout ‡πÄ‡∏°‡∏∑‡πà‡∏≠ network error
  Future<bool> _validateTokenWithServer() async {
    try {
      debugPrint('üîç [SERVER_CHECK] Testing token with server...');
      
      final response = await ApiHelper.getWithTokenHandling(
        ApiConfig.getReminderUrl
      );
      
      debugPrint('üîç [SERVER_CHECK] Response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        debugPrint('‚úÖ [SERVER_CHECK] Token valid - API call successful');
        return true;
      } else if (response.statusCode == 401) {
        debugPrint('‚ùå [SERVER_CHECK] Token invalid - 401 Unauthorized');
        return false;
      } else {
        debugPrint('‚ö†Ô∏è [SERVER_CHECK] Unexpected response: ${response.statusCode}');
        return false;
      }
      
    } catch (e) {
      debugPrint('‚ùå [SERVER_CHECK] Error: $e');
      
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô network error ‡πÉ‡∏´‡πâ throw ‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      if (_isNetworkError(e)) {
        rethrow; // ‡πÉ‡∏´‡πâ _checkAuthenticationStatus() ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      }
      
      return false; // Auth error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logout flag
  Future<bool> _isUserLoggedOut() async {
    return await JWTManager.hasLogoutFlag();
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  Future<void> _updateStatus(String message) async {
    if (mounted) {
      setState(() {
        _statusMessage = message;
      });
    }
    await Future.delayed(const Duration(milliseconds: 500));
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
  Future<void> _clearDataAndGoToLogin() async {
    await JWTManager.clearAll();
    _goToLogin();
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
  void _goToLogin() {
    if (mounted) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => const LoginPage()),
      );
    }
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ TabBar ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT
  void _goToTabBar(UserSession session) {
    if (mounted) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => CustomTabBar(
          userData: {
            'user_id': session.userId,
            'username': session.username,
          },
          connections: [{
            'connect_id': session.connectionId,
            'user_id': session.userId,
          }],
        )),
      );
    }
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Settings ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT
  void _goToSettings(UserSession session) {
    if (mounted) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => const SettingsPage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Colors.teal.shade50 ‡πÄ‡∏õ‡πá‡∏ô Colors.white
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Logo ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                color: Colors.teal,
                borderRadius: BorderRadius.circular(60),
                boxShadow: [
                  BoxShadow(
                    color: Colors.teal.withValues(alpha: 0.3),
                    blurRadius: 20,
                    offset: const Offset(0, 10),
                  ),
                ],
              ),
              child: const Icon(
                Icons.medication,
                size: 60,
                color: Colors.white,
              ),
            ),
            
            const SizedBox(height: 40),
            
            // Progress indicator
            const CircularProgressIndicator(
              strokeWidth: 3,
              valueColor: AlwaysStoppedAnimation<Color>(Colors.teal),
            ),
            
            const SizedBox(height: 24),
            
            // Status message
            Text(
              _statusMessage,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
                fontWeight: FontWeight.w500,
              ),
              textAlign: TextAlign.center,
            ),
            
            const SizedBox(height: 8),
            
            // Sub message
            Text(
              '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}