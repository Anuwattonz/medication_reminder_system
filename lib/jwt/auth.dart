// ‡πÑ‡∏ü‡∏•‡πå: lib/jwt/auth.dart
// Simple Facade - ‡πÑ‡∏°‡πà‡∏°‡∏µ logic ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ JWTManager ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å

import 'package:flutter/material.dart';
import 'package:medication_reminder_system/jwt/jwt_manager.dart';
import 'package:medication_reminder_system/widget/logout.dart';

export 'package:medication_reminder_system/jwt/jwt_manager.dart';
export 'package:medication_reminder_system/jwt/auth_checker.dart';
export 'package:medication_reminder_system/api/jwt_api.dart';
export 'package:medication_reminder_system/widget/logout.dart';

/// Simple Authentication Facade - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
class Auth {
  
  // ==================== Authentication Methods (‡πÉ‡∏ä‡πâ JWTManager ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á) ====================
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<bool> isLoggedIn() async {
    return await JWTManager.hasValidToken();
  }
  
  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° guard method ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
  static Future<bool> guard(BuildContext context) async {
    return await requireAuth(context);
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å auth_helper)
  static Future<bool> requireAuth(BuildContext context) async {
    debugPrint('üîí Checking authentication requirement...');
    
    final isAuthenticated = await JWTManager.ensureValidToken(maxRetries: 3);
    
    if (!isAuthenticated) {
      debugPrint('‚ùå Authentication failed, redirecting to login');
      if (context.mounted) {
        await LogoutHelper.navigateToLoginWithContext(context);
      }
      return false;
    }
    
    debugPrint('‚úÖ Authentication successful');
    return true;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ Navigation (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å auth_helper)
  static Future<bool> isAuthenticated() async {
    debugPrint('üîç Checking authentication status...');
    
    final isAuthenticated = await JWTManager.ensureValidToken(maxRetries: 2);
    
    debugPrint('üîç Authentication status: $isAuthenticated');
    return isAuthenticated;
  }
  
  // ==================== User Data Access (‡πÉ‡∏ä‡πâ JWTManager ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á) ====================
  
  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢ method)
  static Future<UserSession?> getCurrentSession() async {
    return await JWTManager.getCurrentSession();
  }
  
  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ getCurrentSession)
  static Future<Map<String, dynamic>?> currentUser() async {
    final session = await JWTManager.getCurrentSession();
    if (session == null) return null;
    
    // ‡∏£‡∏ß‡∏° token data ‡πÅ‡∏•‡∏∞ saved data
    final result = <String, dynamic>{};
    
    if (session.tokenData != null) {
      result.addAll(session.tokenData!);
    }
    
    if (session.savedUserData != null) {
      result.addAll(session.savedUserData!);
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    result['user_id'] = session.userId;
    result['username'] = session.username;
    result['connect_id'] = session.connectionId;
    result['has_connection'] = session.hasConnection;
    
    return result;
  }
  
  /// ‡∏î‡∏∂‡∏á User ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  static Future<String?> currentUserId() async {
    return await JWTManager.getUserId();
  }
  
  /// ‡∏î‡∏∂‡∏á Username ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  static Future<String?> currentUsername() async {
    return await JWTManager.getUsername();
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<bool> hasDeviceConnection() async {
    return await JWTManager.hasConnection();
  }
  
  /// ‡∏î‡∏∂‡∏á Connection ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  static Future<String?> currentConnectionId() async {
    return await JWTManager.getConnectionId();
  }

  // ==================== Token Methods ====================
  
  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° refreshToken method ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
  static Future<bool> refreshToken() async {
    return await JWTManager.tryRefreshToken();
  }

  // ==================== Logout Methods (Simple Wrappers) ====================
  
  /// Logout ‡∏á‡πà‡∏≤‡∏¢‡πÜ
  static Future<void> logout(BuildContext context) async {
    await LogoutHelper.performFullLogout(reason: 'Auth.logout() called');
  }
  
  /// ‡πÅ‡∏™‡∏î‡∏á Logout Dialog
  static Future<void> showLogoutDialog(BuildContext context) async {
    await LogoutHelper.logoutWithConfirmation(context);
  }
  
  /// Logout ‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
  static Future<void> quickLogout() async {
    await LogoutHelper.quickLogout(reason: 'Auth.quickLogout() called');
  }
  
  /// Emergency logout
  static Future<void> emergencyLogout() async {
    await LogoutHelper.performFullLogout(reason: 'Auth.emergencyLogout() called');
  }

  /// Force logout
  static Future<void> forceLogout([String? reason]) async {
    await LogoutHelper.performFullLogout(reason: reason ?? 'Auth.forceLogout() called');
  }
}