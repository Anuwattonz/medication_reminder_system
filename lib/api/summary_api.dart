// ‡πÑ‡∏ü‡∏•‡πå: lib/api/summary_api.dart
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:medication_reminder_system/config/api_config.dart';
import 'package:medication_reminder_system/api/api_helper.dart';

class SummaryApi {
  /// ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤
  /// [period] - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 'all', 'month', 'week'
  /// [startDate] - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (format: YYYY-MM-DD)
  /// [endDate] - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (format: YYYY-MM-DD)
  static Future<Map<String, dynamic>> getSummary({
    String period = 'all',
    String? startDate,
    String? endDate,
  }) async {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á query parameters
      final queryParams = <String, String>{
        'period': period,
      };
      
      if (startDate != null && startDate.isNotEmpty) {
        queryParams['start_date'] = startDate;
      }
      
      if (endDate != null && endDate.isNotEmpty) {
        queryParams['end_date'] = endDate;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° query parameters
      final url = ApiConfig.buildGetUrl(
        ApiConfig.getSummaryUrl, 
        queryParams
      );

      debugPrint('üåê [SUMMARY_API] Request URL: $url');
      debugPrint('üìã [SUMMARY_API] Parameters: period=$period, start=$startDate, end=$endDate');

      final response = await ApiHelper.getWithTokenHandling(url);

      debugPrint('üì® [SUMMARY_API] Response Status: ${response.statusCode}');
      debugPrint('üìù [SUMMARY_API] Response Body: ${response.body.length > 500 ? '${response.body.substring(0, 500)}...' : response.body}');

      return _buildResponse(response.statusCode, response.body);
    } catch (e) {
      debugPrint('‚ùå [SUMMARY_API] Exception: $e');
      throw Exception(_handleError(e));
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
  static Map<String, dynamic> _buildResponse(int statusCode, String body) {
    try {
      final jsonData = json.decode(body);
      
      debugPrint('‚úÖ [SUMMARY_API] JSON Parse Success');
      debugPrint('üìä [SUMMARY_API] Response Data: status=${jsonData['status']}, message=${jsonData['message']}');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö summary data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (jsonData['data'] != null && jsonData['data']['summary'] != null) {
        final summary = jsonData['data']['summary'];
        debugPrint('üìà [SUMMARY_API] Summary: total=${summary['total_reminders']}, taken=${summary['taken_count']}, rate=${summary['compliance_rate']}%');
      }
      
      return {
        'statusCode': statusCode,
        'success': statusCode == 200 && jsonData['status'] == 'success',
        'data': jsonData,
        'message': jsonData['message'] ?? '',
        'rawBody': body,
      };
    } catch (e) {
      debugPrint('‚ùå [SUMMARY_API] JSON Parse Error: $e');
      debugPrint('üìù [SUMMARY_API] Raw Body: $body');
      
      return {
        'statusCode': statusCode,
        'success': false,
        'data': null,
        'message': 'JSON parse error: $e',
        'rawBody': body,
        'error': 'json_parse_error',
      };
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error messages
  static String _handleError(dynamic error) {
    String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';

    if (error.toString().contains('timeout') || error.toString().contains('‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')) {
      errorMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
    } else if (error.toString().contains('network') || error.toString().contains('connection')) {
      errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ';
    } else if (error.toString().contains('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á token ‡πÑ‡∏î‡πâ')) {
      errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
    } else if (error.toString().contains('Token refresh failed')) {
      errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
    }

    debugPrint('üîÑ [SUMMARY_API] Error Handled: $errorMessage');
    return errorMessage;
  }

  }
